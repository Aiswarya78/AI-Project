# -*- coding: utf-8 -*-
"""Last Update Python Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WjyLqV62UlyWRcPhlFtXaZggeO2hD1Ev
"""

import pandas as pd
import matplotlib.pyplot as plt
import sqlite3

# -----------------------------
# STEP 1: Load Dataset
# -----------------------------
file_path = "synthetic_invoices_dataset_v2_modified.csv"
df = pd.read_csv(file_path)

# Clean column names
df.columns = df.columns.str.strip()

# -----------------------------
# STEP 2: Detect Key Columns
# -----------------------------
amount_col, vendor_col, date_col, item_col, qty_col = None, None, None, None, None

for col in df.columns:
    if "amount" in col.lower() or "price" in col.lower() or "total" in col.lower():
        amount_col = col
    if "vendor" in col.lower() or "supplier" in col.lower():
        vendor_col = col
    if "date" in col.lower():
        date_col = col
    if "item" in col.lower() or "product" in col.lower():
        item_col = col
    if "qty" in col.lower() or "quantity" in col.lower():
        qty_col = col

if not amount_col or not vendor_col:
    raise ValueError("Dataset must contain vendor and amount column")

if date_col:
    df[date_col] = pd.to_datetime(df[date_col], errors="coerce")

# -----------------------------
# STEP 3: Save to Database
# -----------------------------
conn = sqlite3.connect("invoices.db")
df.to_sql("invoices", conn, if_exists="replace", index=False)

# -----------------------------
# STEP 4: Vendor Trust Score
# -----------------------------
def calculate_vendor_metrics(df, amount_col, vendor_col):
    vendors = []
    df[amount_col] = pd.to_numeric(df[amount_col], errors='coerce').fillna(0)

    for vendor, group in df.groupby(vendor_col):
        total_invoices = len(group)
        total_amount = group[amount_col].sum()

        if "payment_date" in group.columns and "due_date" in group.columns:
            group["payment_date"] = pd.to_datetime(group["payment_date"], errors="coerce")
            group["due_date"] = pd.to_datetime(group["due_date"], errors="coerce")
            on_time = (group["payment_date"] <= group["due_date"]).sum()
            on_time_ratio = on_time / total_invoices if total_invoices > 0 else 0
        else:
            on_time_ratio = 0.5

        trust_score = (on_time_ratio * 70) + (min(total_amount, 100000) / 100000 * 30)

        vendors.append({
            vendor_col: vendor,
            "total_invoices": total_invoices,
            "total_amount": total_amount,
            "on_time_ratio": round(on_time_ratio, 2),
            "trust_score": round(trust_score, 2)
        })

    return pd.DataFrame(vendors)

vendor_scores = calculate_vendor_metrics(df, amount_col, vendor_col)
print("\nüìä Vendor Trust Scores:")
print(vendor_scores.sort_values(by="trust_score", ascending=False))

# -----------------------------
# STEP 5: Feature 1 - Purchase Date Reminder
# -----------------------------
if date_col:
    print("\nüìÖ Checking purchase reminders...")
    reminders = []

    for (vendor, item), group in df.groupby([vendor_col, item_col] if item_col else [vendor_col]):
        group = group.sort_values(by=date_col)
        dates = group[date_col].dropna().tolist()

        for i in range(len(dates) - 1):
            expected_next = dates[i] + pd.DateOffset(months=1)
            if dates[i+1].date() != expected_next.date():
                reminders.append(f"‚è∞ Reminder: Next purchase for {vendor} - {item} expected on {expected_next.date()} but got {dates[i+1].date()}.")

    if reminders:
        for r in reminders:
            print(r)
    else:
        print("‚úÖ All purchases follow monthly cycle.")

# -----------------------------
# STEP 6: Feature 2 - Drastic Price Change Detection
# -----------------------------
if item_col:
    print("\n‚ö†Ô∏è Checking for drastic price changes...")
    warnings = []

    df[amount_col] = pd.to_numeric(df[amount_col], errors='coerce')
    df_sorted = df.sort_values(by=date_col)

    for (vendor, item), group in df_sorted.groupby([vendor_col, item_col]):
        if len(group) >= 5:
            last_5 = group.tail(5)
            last_price = last_5.iloc[-1][amount_col]
            prev_avg = last_5.iloc[:-1][amount_col].mean()

            if prev_avg > 0 and abs(last_price - prev_avg) / prev_avg > 0.3:
                warnings.append(
                    f"‚ö†Ô∏è Drastic price change for {vendor} - {item}: Last = {last_price}, AvgPrev4 = {round(prev_avg,2)}"
                )

    if warnings:
        for w in warnings:
            print(w)
    else:
        print("‚úÖ No drastic price changes detected.")

# -----------------------------
# STEP 7: Plots
# -----------------------------
plt.figure(figsize=(10, 6))
plt.bar(vendor_scores[vendor_col], vendor_scores["trust_score"], color="skyblue")
plt.title("Vendor Trust Scores")
plt.xlabel("Vendor")
plt.ylabel("Trust Score")
plt.xticks(rotation=45)
plt.show()

if date_col:
    df_grouped = df.groupby(date_col)[amount_col].sum().sort_index()
    plt.figure(figsize=(10, 6))
    df_grouped.plot(marker="o")
    plt.title("Invoice Amount Trend Over Time")
    plt.xlabel("Date")
    plt.ylabel("Total Invoice Amount")
    plt.show()

# -----------------------------
# STEP 8: Add New Data
# -----------------------------
choice = input("\n‚ûï Do you want to add a new invoice record? (yes/no): ").strip().lower()
if choice == "yes":
    new_vendor = input("Enter Vendor Name: ")
    new_item = input("Enter Item/Product: ")
    new_qty = input("Enter Quantity: ")
    new_amount = input("Enter Amount: ")
    new_date = input("Enter Invoice Date (YYYY-MM-DD): ")

    new_row = {
        vendor_col: new_vendor,
        item_col: new_item,
        qty_col: new_qty,
        amount_col: new_amount,
        date_col: pd.to_datetime(new_date, errors="coerce")
    }

    df = df.append(new_row, ignore_index=True)
    df.to_csv(file_path, index=False)
    print("‚úÖ New record added successfully and saved to dataset!")

# -----------------------------
# STEP 9: Verify Vendor Records
# -----------------------------
verify_choice = input("\nüîç Do you want to verify existing dataset by vendor? (yes/no): ").strip().lower()
if verify_choice == "yes":
    vendor_name = input("Enter Vendor Name to search: ").strip()
    vendor_records = df[df[vendor_col].str.lower() == vendor_name.lower()]
    if not vendor_records.empty:
        print(f"\nüìÇ All invoices for vendor '{vendor_name}':")
        print(vendor_records)
    else:
        print(f"‚ùå No records found for vendor '{vendor_name}'")

# -----------------------------
# Close DB Connection
# -----------------------------
conn.close()